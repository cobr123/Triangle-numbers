import java.math.BigInteger;

public class BigIntTest {

	/**
	 * The sequence of triangle numbers is generated by adding the natural
	 * numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
	 * 28. The first ten terms would be:
	 * 
	 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	 * 
	 * Let us list the factors of the first seven triangle numbers:
	 * 
	 * 1: 1 3: 1,3 6: 1,2,3,6 10: 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28:
	 * 1,2,4,7,14,28
	 * 
	 * We can see that 28 is the first triangle number to have over five
	 * divisors.
	 * 
	 * What is the value of the first triangle number to have over five hundred
	 * divisors?
	 */
	public static void main(String[] args) {
		BigInteger sum = BigInteger.valueOf(0);
		int divCnt = 0;
		BigInteger i = BigInteger.valueOf(27);

		//for (int i = 1; i <= 10; ++i) {
		while(true){
			sum = sum.add(i);
			//System.out.print(sum + ": ");
			divCnt = 1;
			for(BigInteger k = BigInteger.valueOf(2); k.compareTo(sum) <= 0; k= k.add(BigInteger.ONE)){
				if(BigInteger.valueOf(0).compareTo(sum.divide(k)) == 0){
					++divCnt;
					//System.out.print(k + " ");
				}
			}
			if(divCnt > 4){
				System.out.println(sum);
				break;
			}
			i = i.add(BigInteger.ONE);
			//System.out.print("\n");
		}
	}

}
